# ==============================================================================
# 🏷️ Release Validation - Tag-Based Version Consistency Check
# ==============================================================================
# 
# Purpose: Validates version consistency across CMakeLists.txt, vcpkg.json, and git tags
# before GitHub creates automatic source tarballs for distribution.
# 
# Features:
# • Robust CMake version extraction via proper configuration and CMakeCache.txt parsing
# • Support for all vcpkg.json version field variants (version, version-string, version-semver, etc.)
# • GitHub Actions UI integration with ::error:: annotations and collapsible debug logs
# • Clean semantic version restriction (v1.0.0 format) - no pre-release suffixes allowed
# • Production-ready error handling with actionable developer guidance and troubleshooting
# • Integration with reusable setup-env.yml workflow for consistent environment
# 
# Workflow Process:
# 1. Admin pushes semantic version tag (e.g., v1.0.8) to repository
# 2. cmake-build job configures project using cmake-build.yml (includes setup-env.yml automatically)
# 3. validate-release job extracts versions from CMakeCache.txt and vcpkg.json, then compares
# 4. If validation passes, GitHub automatically creates source tarball
# 5. Downstream publish.yml workflow can use validated tarball for vcpkg registry
# 
# Trigger Pattern:
# • Only responds to clean semantic version tags: v1.0.0, v2.1.3, etc.
# • Rejects pre-release tags: v1.0.0-alpha, v1.0.0-beta, v1.0.0-rc1
# ==============================================================================

name: 🏷️ Release Validation

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Only clean versions (v1.0.0), no suffixes for now

jobs:
  # ==============================================================================
  # CMake Build Job - Configure Project and Generate CMakeCache.txt
  # ==============================================================================
  # Configures the project and generates CMakeCache.txt needed for version extraction.
  cmake-build:
    name: 🔨 CMake Configure for Version Extraction
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    
    steps:
      - name: Checkout Source
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 🔧 Setup Compiler Environment
        uses: ./.github/actions/setup-env
        with:
          compiler: gcc
          enable-ccache: false

      - name: 📦 Setup vcpkg & Private Registry
        uses: ./.github/actions/setup-vcpkg
        with:
          vcpkgDirectory: ${{ runner.temp }}/vcpkg

      - name: Configure Private Registry Authentication
        run: |
          git config --global credential.https://github.com.helper '!f() { echo username=unused; echo password=${{ secrets.VCPKG_REGISTRY_TOKEN }}; }; f'

      - name: 🔨 Configure CMake (for version extraction)
        run: |
          echo "::group::Configure CMake"
          cmake --preset debug \
            -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_C_COMPILER=${CC} \
            -DCMAKE_CXX_COMPILER=${CXX} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=OFF \
            -Wno-dev
          echo "::endgroup::"
        env:
          AUTHORIZATION_TOKEN: ${{ secrets.VCPKG_REGISTRY_TOKEN }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-debug-gcc
          path: |
            build/debug/CMakeCache.txt
            build/debug/cmake_install.cmake
          retention-days: 1
          if-no-files-found: error

  # ==============================================================================
  # Complete Build and Test Job - All-in-One Release Validation
  # ==============================================================================
  # 1. Prepare compiler, 2. Setup vcpkg, 3. Compile, 4. Run testsuite
  build-and-test:
    name: 🚀 Build & Test • Release
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    
    steps:
      - name: Checkout Source
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Step 1: Prepare Compiler
      - name: 🔧 Step 1 - Prepare Compiler Environment
        uses: ./.github/actions/setup-env
        with:
          compiler: gcc
          enable-ccache: false

      # Step 2: Setup vcpkg and Private Registry
      - name: 📦 Step 2 - Setup vcpkg & Private Registry
        uses: ./.github/actions/setup-vcpkg
        with:
          vcpkgDirectory: ${{ runner.temp }}/vcpkg

      - name: Configure Private Registry Authentication
        run: |
          # Configure git credentials for private registry access
          git config --global credential.https://github.com.helper '!f() { echo username=unused; echo password=${{ secrets.VCPKG_REGISTRY_TOKEN }}; }; f'

      # Step 3: Compile
      - name: 🔨 Step 3 - Compile Executable
        run: |
          echo "::group::Configure CMake"
          cmake --preset debug \
            -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake \
            -DCMAKE_C_COMPILER=${CC} \
            -DCMAKE_CXX_COMPILER=${CXX}
          echo "::endgroup::"
          
          echo "::group::Build Executable"
          cmake --build --preset debug
          echo "::endgroup::"
        env:
          AUTHORIZATION_TOKEN: ${{ secrets.VCPKG_REGISTRY_TOKEN }}

      # Step 4: Run Testsuite  
      - name: 🧪 Step 4 - Run Testsuite
        run: |
          echo "::group::Run Unit Tests"
          ctest --preset debug --verbose
          echo "::endgroup::"
          
          echo "::group::Test Executable Functionality"
          # Test the built executable
          echo "Testing executable..."
          if [ -f "build/debug/src/{{ project_name_underscore }}" ]; then
            ./build/debug/src/{{ project_name_underscore }} --version || echo "Version check completed"
            ./build/debug/src/{{ project_name_underscore }} --help || echo "Help check completed"
          else
            echo "Executable not found, checking build directory:"
            find build -name "{{ project_name_underscore }}" -type f || echo "No executable found"
          fi
          echo "::endgroup::"

  # ==============================================================================
  # Release Validation Job - Extract and Compare Version Numbers
  # ==============================================================================
  # Performs comprehensive version consistency validation across all project files.
  # Uses CMakeCache.txt from cmake-build job for robust version extraction.
  validate-release:
    name: 🏷️ Validate • Release Tag
    needs: cmake-build
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    
    steps:
      - name: Checkout Source
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract Tag Version
        id: tag
        run: |
          # Extract version from tag (remove 'v' prefix)
          TAG_WITH_V=${GITHUB_REF#refs/tags/}
          TAG_VERSION=${TAG_WITH_V#v}
          echo "TAG_WITH_V=$TAG_WITH_V" >> $GITHUB_ENV
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Install Python (for vcpkg.json parsing)
        timeout-minutes: 2
        run: |
          # Install Python for vcpkg.json version extraction
          sudo apt-get update
          sudo apt-get install -y python3

      - name: Download Build Artifacts from CMake Job
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-debug-gcc
          path: build/debug/

      - name: Extract CMake Version
        id: cmake-version
        run: |
          echo "::group::Extract CMAKE version from cmake-build job cache"
          
          # Verify CMakeCache.txt exists from cmake-build job
          if [[ ! -f "build/debug/CMakeCache.txt" ]]; then
            echo "::error::CMakeCache.txt not found in build directory from cmake-build job"
            echo "❌ CMakeCache.txt not found!"
            echo ""
            echo "   The cmake-build job should have created build/debug/CMakeCache.txt"
            echo "   Check that the cmake-build job completed successfully"
            echo "   Build directory contents:"
            ls -la build/debug/ 2>/dev/null || echo "   build/debug/ directory not found"
            exit 1
          fi
          
          echo "✅ Found CMakeCache.txt from cmake-build job"
          
          # Debug: Show version-related entries in CMakeCache.txt
          echo "🔍 Debug: Version entries in CMakeCache.txt:"
          grep -i "version" build/debug/CMakeCache.txt | head -10 || echo "No version entries found"
          
          # Extract CMAKE_PROJECT_VERSION from CMakeCache.txt (most reliable method)
          CMAKE_VERSION=$(sed -n 's/^CMAKE_PROJECT_VERSION:.*=\(.*\)$/\1/p' build/debug/CMakeCache.txt 2>/dev/null | head -n1 | tr -d ' ')
          
          echo "🔍 Debug: CMAKE_PROJECT_VERSION found: '$CMAKE_VERSION'"
          
          echo "CMAKE_VERSION=$CMAKE_VERSION" >> $GITHUB_ENV
          echo "cmake-version=$CMAKE_VERSION" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Extract vcpkg.json Version
        id: vcpkg-version
        run: |
          echo "::group::Extract vcpkg.json version using Python script"
          
          # Use standalone Python script to extract version
          VCPKG_VERSION=$(python3 .github/scripts/extract_vcpkg_version.py)
          
          if [ -z "$VCPKG_VERSION" ]; then
            echo "::error::Failed to extract version from vcpkg.json"
            exit 1
          fi
          
          echo "Extracted vcpkg version: $VCPKG_VERSION"
          echo "VCPKG_VERSION=$VCPKG_VERSION" >> $GITHUB_ENV
          echo "vcpkg-version=$VCPKG_VERSION" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Validate Version Consistency
        run: |
          echo "🎯 Version Consistency Check:"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "Tag      : $TAG_VERSION"
          echo "CMake    : $CMAKE_VERSION"  
          echo "vcpkg    : $VCPKG_VERSION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          if [ -z "$CMAKE_VERSION" ]; then
            echo "::error::Failed to extract CMake version from project() declaration"
            echo "❌ Failed to extract CMake version!"
            echo ""
            echo "   Check that ./CMakeLists.txt has 'project(name VERSION x.y.z)' declaration"
            echo "   The VERSION must be set in the project() command for automatic extraction"
            exit 1
          fi
          
          if [ -z "$VCPKG_VERSION" ]; then
            echo "::error::Failed to extract version from vcpkg.json"
            echo "❌ Failed to extract vcpkg.json version!"
            echo ""
            echo "   Check that ./vcpkg.json has a version field such as:"
            echo "   • \"version\": \"x.y.z\""
            echo "   • \"version-string\": \"x.y.z\""  
            echo "   • \"version-semver\": \"x.y.z\""
            exit 1
          fi
          
          if [ "$CMAKE_VERSION" != "$TAG_VERSION" ] || [ "$VCPKG_VERSION" != "$TAG_VERSION" ]; then
            echo "::error::Version mismatch! Tag=$TAG_VERSION, CMake=$CMAKE_VERSION, vcpkg=$VCPKG_VERSION"
            echo "❌ Version mismatch!"
            echo ""
            echo "   Tag      : $TAG_VERSION"
            echo "   CMake    : $CMAKE_VERSION"  
            echo "   vcpkg    : $VCPKG_VERSION"
            echo ""
            echo "Please update ./CMakeLists.txt and/or ./vcpkg.json to match tag version."
            exit 1
          fi
          
          echo "✅ Versions aligned:"
          echo "   Tag      : $TAG_WITH_V"
          echo "   CMake    : $CMAKE_VERSION"  
          echo "   vcpkg    : $VCPKG_VERSION"
          echo "   Tarball  : https://github.com/${{ github.repository }}/archive/refs/tags/$TAG_WITH_V.tar.gz"
          echo ""
          echo "🎉 Release validation passed! GitHub will create the source tarball automatically."